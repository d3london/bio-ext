services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_LOCAL_VERSION}
    container_name: ${ES_LOCAL_CONTAINER_NAME}
    networks:
      - es_network    
    volumes:
      - dev-elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 127.0.0.1:${ES_LOCAL_PORT}:9200
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ES_LOCAL_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.license.self_generated.type=trial
      - xpack.ml.use_auto_machine_memory_percent=true
      - ES_JAVA_OPTS=-Xms${ES_LOCAL_HEAP_INIT} -Xmx${ES_LOCAL_HEAP_MAX}
      - cluster.routing.allocation.disk.watermark.low=${ES_LOCAL_DISK_SPACE_REQUIRED}
      - cluster.routing.allocation.disk.watermark.high=${ES_LOCAL_DISK_SPACE_REQUIRED}
      - cluster.routing.allocation.disk.watermark.flood_stage=${ES_LOCAL_DISK_SPACE_REQUIRED}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --output /dev/null --silent --head --fail -u elastic:${ES_LOCAL_PASSWORD} http://elasticsearch:${ES_LOCAL_PORT}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  kibana_settings:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_LOCAL_VERSION}
    container_name: kibana_settings
    networks:
      - es_network    
    restart: 'no'
    command: >
      bash -c '
        echo "Setup the kibana_system password";
        start_time=$(date +%s);
        timeout=60;
        until curl -s -u "elastic:${ES_LOCAL_PASSWORD}" -X POST http://elasticsearch:${ES_LOCAL_PORT}/_security/user/kibana_system/_password -d "{\"password\":\"'${KIBANA_LOCAL_PASSWORD}'\"}" -H "Content-Type: application/json" | grep -q "^{}"; do if [ $(($(date +%s) - $$start_time)) -ge $$timeout ]; then echo "Error: Elasticsearch timeout"; exit 1; fi; sleep 2; done;
      '

  kibana:
    depends_on:
      kibana_settings:
        condition: service_completed_successfully
    image: docker.elastic.co/kibana/kibana:${ES_LOCAL_VERSION}
    container_name: ${KIBANA_LOCAL_CONTAINER_NAME}
    networks:
      - es_network    
    volumes:
      - dev-kibana:/usr/share/kibana/data
    ports:
      - 127.0.0.1:${KIBANA_LOCAL_PORT}:5601
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_LOCAL_PASSWORD}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
      - ELASTICSEARCH_PUBLICBASEURL=http://localhost:${ES_LOCAL_PORT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://kibana:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 20

  doccano:
    image: doccano/doccano:1.8.4
    container_name: bioextdoccano
    networks:
      - bioext_network    
    ports:
      - "8000:8000"
    volumes:
      - doccano_data:/data
    environment:
      - ADMIN_USERNAME=${DOCCANO_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${DOCCANO_ADMIN_PASSWORD}
      - ADMIN_EMAIL=${DOCCANO_ADMIN_EMAIL}
      - DJANGO_DB_ENGINE=django.db.backends.sqlite3
      - DJANGO_DB_NAME=/data/doccano.sqlite3
    command: ["/doccano/tools/run.sh", "webserver"]
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G      
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2024-09-22T00-33-43Z
    container_name: bioextminio
    networks:
      - bioext_network    
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - NO_PROXY=bioextminio,localhost
    command: ["server", "/data", "--console-address", ":9001", "--address", ":9000"]
    deploy: 
      resources:
        limits:
          cpus: '2'
          memory: 8G      
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    
  mlflow:
    image: drjzhn/mlflow-boto:v2.17.0
    container_name: bioextmlflow
    networks:
      - bioext_network    
    ports:
      - "5001:5000"
    volumes:
      - mlflow_data:/mlflow/data
    environment:
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - MLFLOW_S3_IGNORE_TLS=true
      - AWS_DEFAULT_REGION=minio
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_LOGGING_LEVEL=DEBUG
      # required to bypass Trust proxies to communicate with Minio
      - no_proxy=bioextminio,localhost,127.0.0.1,.bioext_network      
    command: ["mlflow", "server", "--host", "0.0.0.0", "--backend-store-uri", "sqlite:///mlflow/data/mlflow.db", "--artifacts-destination", "s3://mlflow-artifacts", "--serve-artifacts"]
    depends_on:
      - minio
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 8G            
    restart: unless-stopped

volumes:
  dev-elasticsearch:
  dev-kibana:
  mlflow_data:
  minio_data:
  doccano_data:

networks:
  bioext_network:
    name: bioext_network
  es_network:
    name: es_network